#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢)
‡πÉ‡∏ä‡πâ API ‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
"""

import requests
import json
import os
from datetime import datetime
import random

class SimpleAQIClient:
    def __init__(self):
        self.output_dir = "output"
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
        self.thai_cities = {
            "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø": {"lat": 13.7563, "lon": 100.5018, "en": "Bangkok"},
            "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": {"lat": 18.7883, "lon": 98.9853, "en": "Chiang Mai"},
            "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï": {"lat": 7.8804, "lon": 98.3923, "en": "Phuket"},
            "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": {"lat": 16.4322, "lon": 102.8236, "en": "Khon Kaen"},
            "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤": {"lat": 14.9799, "lon": 102.0977, "en": "Nakhon Ratchasima"},
            "‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà": {"lat": 7.0061, "lon": 100.4681, "en": "Hat Yai"},
            "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ": {"lat": 17.4138, "lon": 102.7870, "en": "Udon Thani"},
            "‡∏£‡∏∞‡∏¢‡∏≠‡∏á": {"lat": 12.6868, "lon": 101.2539, "en": "Rayong"}
        }
        
    def create_output_directory(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {self.output_dir} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    def get_openweather_aqi(self, lat, lon, city_name):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AQI ‡∏à‡∏≤‡∏Å OpenWeatherMap API (‡∏ü‡∏£‡∏µ)"""
        try:
            # ‡πÉ‡∏ä‡πâ API ‡∏ü‡∏£‡∏µ‡∏à‡∏≤‡∏Å OpenWeatherMap (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            base_aqi = random.randint(25, 85)  # AQI ‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)
            if "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û" in city_name:
                base_aqi += random.randint(10, 25)
            elif "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" in city_name:
                # ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏°‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏á
                base_aqi += random.randint(5, 20)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏≤‡∏Å AQI
            pm25 = max(5, base_aqi * 0.6 + random.randint(-10, 10))
            pm10 = max(10, pm25 * 1.5 + random.randint(-5, 15))
            o3 = max(10, random.randint(15, 45))
            
            station_data = {
                "city": city_name,
                "city_en": self.thai_cities[city_name]["en"],
                "coordinates": {
                    "latitude": lat,
                    "longitude": lon
                },
                "AQI": min(base_aqi, 150),  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                "PM2.5": round(pm25, 1),
                "PM10": round(pm10, 1),
                "O3": round(o3, 1),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "data_source": "‡∏à‡∏≥‡∏•‡∏≠‡∏á (Simulated)"
            }
            
            return station_data
            
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {city_name}: {e}")
            return None
    
    def get_thailand_air_quality(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"""
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢...")
        
        thailand_data = {
            "timestamp": datetime.now().isoformat(),
            "country": "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
            "data_source": "‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
            "note": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á",
            "stations": []
        }
        
        for city_th, info in self.thai_cities.items():
            print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {city_th}...")
            
            city_data = self.get_openweather_aqi(
                info["lat"], 
                info["lon"], 
                city_th
            )
            
            if city_data:
                thailand_data["stations"].append(city_data)
                aqi_level = self.get_aqi_level_description(city_data["AQI"])
                print(f"‚úì {city_th}: AQI {city_data['AQI']} ({aqi_level})")
            else:
                print(f"‚úó ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {city_th} ‡πÑ‡∏î‡πâ")
        
        return thailand_data
    
    def get_thailand_summary(self, data):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"""
        if not data.get('stations'):
            return None
        
        stations = data['stations']
        summary = {
            "timestamp": data['timestamp'],
            "country": data['country'],
            "data_source": data['data_source'],
            "note": data.get('note', ''),
            "total_stations": len(stations),
            "average_AQI": None,
            "average_PM2.5": None,
            "average_PM10": None,
            "average_O3": None,
            "stations_data": stations
        }
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        aqi_values = [s['AQI'] for s in stations if s.get('AQI') is not None]
        pm25_values = [s['PM2.5'] for s in stations if s.get('PM2.5') is not None]
        pm10_values = [s['PM10'] for s in stations if s.get('PM10') is not None]
        o3_values = [s['O3'] for s in stations if s.get('O3') is not None]
        
        if aqi_values:
            summary['average_AQI'] = round(sum(aqi_values) / len(aqi_values), 1)
        if pm25_values:
            summary['average_PM2.5'] = round(sum(pm25_values) / len(pm25_values), 1)
        if pm10_values:
            summary['average_PM10'] = round(sum(pm10_values) / len(pm10_values), 1)
        if o3_values:
            summary['average_O3'] = round(sum(o3_values) / len(o3_values), 1)
        
        return summary
    
    def get_aqi_level_description(self, aqi):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ AQI ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        if aqi is None:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        elif aqi <= 50:
            return "‡∏î‡∏µ"
        elif aqi <= 100:
            return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        elif aqi <= 150:
            return "‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"
        elif aqi <= 200:
            return "‡πÑ‡∏°‡πà‡∏î‡∏µ"
        elif aqi <= 300:
            return "‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å"
        else:
            return "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"
    
    def get_aqi_color(self, aqi):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° AQI"""
        if aqi is None:
            return "‡πÄ‡∏ó‡∏≤"
        elif aqi <= 50:
            return "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß"
        elif aqi <= 100:
            return "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á"
        elif aqi <= 150:
            return "‡∏™‡πâ‡∏°"
        elif aqi <= 200:
            return "‡πÅ‡∏î‡∏á"
        elif aqi <= 300:
            return "‡∏°‡πà‡∏ß‡∏á"
        else:
            return "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÅ‡∏î‡∏á"
    
    def save_to_json(self, data, filename="thailand_air_quality.json"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
        filepath = os.path.join(self.output_dir, filename)
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {filepath} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return True
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}")
            return False
    
    def display_summary(self, summary):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
        print("\n" + "="*60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢")
        print("="*60)
        
        print(f"üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {summary['timestamp'][:19]}")
        print(f"üìç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏î: {summary['total_stations']} ‡πÄ‡∏°‡∏∑‡∏≠‡∏á")
        print(f"üìä ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {summary['data_source']}")
        
        if summary.get('note'):
            print(f"‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {summary['note']}")
        
        print("\nüìà ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®:")
        avg_aqi = summary['average_AQI']
        aqi_level = self.get_aqi_level_description(avg_aqi)
        aqi_color = self.get_aqi_color(avg_aqi)
        
        print(f"   AQI: {avg_aqi} ({aqi_level} - {aqi_color})")
        print(f"   PM2.5: {summary['average_PM2.5']} Œºg/m¬≥")
        print(f"   PM10: {summary['average_PM10']} Œºg/m¬≥")
        print(f"   O3: {summary['average_O3']} Œºg/m¬≥")
        
        print("\nüèôÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
        print("-" * 60)
        
        for station in summary['stations_data']:
            aqi = station['AQI']
            level = self.get_aqi_level_description(aqi)
            color = self.get_aqi_color(aqi)
            
            print(f"üìç {station['city']:<12} | AQI: {aqi:>3} ({level:<15}) | PM2.5: {station['PM2.5']:>5} Œºg/m¬≥")
        
        print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        if avg_aqi <= 50:
            print("   ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á")
        elif avg_aqi <= 100:
            print("   ‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏¢‡πÉ‡∏à")
        elif avg_aqi <= 150:
            print("   üö® ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ô‡∏≤‡∏ô")
        else:
            print("   ‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å")
    
    def run(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        print("üå§Ô∏è  ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢")
        print("=" * 50)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output
        self.create_output_directory()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        thailand_data = self.get_thailand_air_quality()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        summary = self.get_thailand_summary(thailand_data)
        
        if summary and summary['total_stations'] > 0:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            self.display_summary(summary)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            success = self.save_to_json(summary)
            
            if success:
                print(f"\nüíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {self.output_dir}/thailand_air_quality.json")
                return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ")
            return False

def main():
    client = SimpleAQIClient()
    client.run()

if __name__ == "__main__":
    main() 